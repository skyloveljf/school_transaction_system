<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.yourproject.mapper.OrderMapper">

    <sql id="orderColumns">
        o.order_id, o.product_id, o.buyer_id, o.seller_id, 
        o.price_at_purchase, o.status, o.order_time, o.last_update_time
    </sql>

    <resultMap id="OrderResultMap" type="com.example.yourproject.model.Order">
        <id property="orderId" column="order_id" javaType="java.lang.Long"/>
        <result property="productId" column="product_id" javaType="java.lang.Long"/>
        <result property="buyerId" column="buyer_id" javaType="java.lang.Long"/>
        <result property="sellerId" column="seller_id" javaType="java.lang.Long"/>
        <result property="priceAtPurchase" column="price_at_purchase"/>
        <result property="status" column="status" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
        <result property="orderTime" column="order_time" jdbcType="TIMESTAMP"/>
        <result property="lastUpdateTime" column="last_update_time" jdbcType="TIMESTAMP"/>

        <association property="product" javaType="com.example.yourproject.model.Product">
            <id property="productId" column="p_product_id" javaType="java.lang.Long"/>
            <result property="title" column="p_title"/>
            <result property="price" column="p_current_price"/> <!-- 商品当前价格 -->
            <result property="imageUrl" column="p_image_url"/>
            <!-- 商品的卖家信息 -->
            <association property="seller" javaType="com.example.yourproject.model.User" resultMap="com.example.yourproject.mapper.UserMapper.UserResultMap" columnPrefix="p_seller_"/>
        </association>

        <association property="buyer" javaType="com.example.yourproject.model.User" resultMap="com.example.yourproject.mapper.UserMapper.UserResultMap" columnPrefix="buyer_user_"/>
        <association property="sellerInfo" javaType="com.example.yourproject.model.User" resultMap="com.example.yourproject.mapper.UserMapper.UserResultMap" columnPrefix="seller_user_"/>
    </resultMap>
    
    <!-- 用于 product.seller 和 order.sellerInfo, order.buyer 的 User Result Map 前缀 -->
    <!-- UserMapper.UserResultMap 已经定义，这里通过 columnPrefix 在查询时区分 -->
    <!-- 例如 SELECT ..., u_buyer.username AS buyer_user_username, ... -->
    <!-- p_seller_user_id, p_seller_username, p_seller_avatar_url -->
    <!-- buyer_user_user_id, buyer_user_username, buyer_user_avatar_url -->
    <!-- seller_user_user_id, seller_user_username, seller_user_avatar_url -->

    <select id="findById" resultMap="OrderResultMap" parameterType="java.lang.Long">
        SELECT 
            <include refid="orderColumns"/>,
            p.product_id as p_product_id, p.title as p_title, p.price as p_current_price, p.image_url as p_image_url,
            -- Product's Seller (p_seller_)
            p_seller.user_id as p_seller_user_id, p_seller.username as p_seller_username, p_seller.avatar_url as p_seller_avatar_url,
            -- Product's Buyer (buyer_user_)
            buyer.user_id as buyer_user_user_id, buyer.username as buyer_user_username, buyer.avatar_url as buyer_user_avatar_url,
            -- Order's Seller (seller_user_)
            seller.user_id as seller_user_user_id, seller.username as seller_user_username, seller.avatar_url as seller_user_avatar_url
        FROM tongrenG.ORDERS o
        LEFT JOIN tongrenG.PRODUCTS p ON o.product_id = p.product_id
        LEFT JOIN tongrenG.USERS p_seller ON p.user_id = p_seller.user_id     <!-- Product's Seller -->
        LEFT JOIN tongrenG.USERS buyer ON o.buyer_id = buyer.user_id          <!-- Order's Buyer -->
        LEFT JOIN tongrenG.USERS seller ON o.seller_id = seller.user_id      <!-- Order's Seller (direct from order) -->
        WHERE o.order_id = #{orderId}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="orderId" keyColumn="order_id" parameterType="com.example.yourproject.model.Order">
        INSERT INTO tongrenG.ORDERS (product_id, buyer_id, seller_id, price_at_purchase, status, order_time, last_update_time)
        VALUES (#{productId}, #{buyerId}, #{sellerId}, #{priceAtPurchase}, 
                #{status, typeHandler=org.apache.ibatis.type.EnumTypeHandler}, 
                #{orderTime, jdbcType=TIMESTAMP}, #{lastUpdateTime, jdbcType=TIMESTAMP})
    </insert>

    <update id="update" parameterType="com.example.yourproject.model.Order">
        UPDATE tongrenG.ORDERS
        <set>
            <if test="productId != null">product_id = #{productId},</if>
            <if test="buyerId != null">buyer_id = #{buyerId},</if>
            <if test="sellerId != null">seller_id = #{sellerId},</if>
            <if test="priceAtPurchase != null">price_at_purchase = #{priceAtPurchase},</if>
            <if test="status != null">status = #{status, typeHandler=org.apache.ibatis.type.EnumTypeHandler},</if>
            <if test="lastUpdateTime != null">last_update_time = #{lastUpdateTime, jdbcType=TIMESTAMP},</if>
        </set>
        WHERE order_id = #{orderId}
    </update>

    <select id="findByBuyerId" resultMap="OrderResultMap" parameterType="java.lang.Long">
        SELECT 
            <include refid="orderColumns"/>,
            p.product_id as p_product_id, p.title as p_title, p.price as p_current_price, p.image_url as p_image_url,
            p_seller.user_id as p_seller_user_id, p_seller.username as p_seller_username, p_seller.avatar_url as p_seller_avatar_url,
            buyer.user_id as buyer_user_user_id, buyer.username as buyer_user_username, buyer.avatar_url as buyer_user_avatar_url,
            seller.user_id as seller_user_user_id, seller.username as seller_user_username, seller.avatar_url as seller_user_avatar_url
        FROM tongrenG.ORDERS o
        LEFT JOIN tongrenG.PRODUCTS p ON o.product_id = p.product_id
        LEFT JOIN tongrenG.USERS p_seller ON p.user_id = p_seller.user_id
        LEFT JOIN tongrenG.USERS buyer ON o.buyer_id = buyer.user_id
        LEFT JOIN tongrenG.USERS seller ON o.seller_id = seller.user_id
        WHERE o.buyer_id = #{buyerId}
        ORDER BY o.order_time DESC
    </select>

    <select id="findBySellerId" resultMap="OrderResultMap" parameterType="java.lang.Long">
        SELECT 
             <include refid="orderColumns"/>,
            p.product_id as p_product_id, p.title as p_title, p.price as p_current_price, p.image_url as p_image_url,
            p_seller.user_id as p_seller_user_id, p_seller.username as p_seller_username, p_seller.avatar_url as p_seller_avatar_url,
            buyer.user_id as buyer_user_user_id, buyer.username as buyer_user_username, buyer.avatar_url as buyer_user_avatar_url,
            seller.user_id as seller_user_user_id, seller.username as seller_user_username, seller.avatar_url as seller_user_avatar_url
        FROM tongrenG.ORDERS o
        LEFT JOIN tongrenG.PRODUCTS p ON o.product_id = p.product_id
        LEFT JOIN tongrenG.USERS p_seller ON p.user_id = p_seller.user_id
        LEFT JOIN tongrenG.USERS buyer ON o.buyer_id = buyer.user_id
        LEFT JOIN tongrenG.USERS seller ON o.seller_id = seller.user_id
        WHERE o.seller_id = #{sellerId}
        ORDER BY o.order_time DESC
    </select>

    <select id="findByProductId" resultMap="OrderResultMap" parameterType="java.lang.Long">
        SELECT 
            <include refid="orderColumns"/>,
            p.product_id as p_product_id, p.title as p_title, p.price as p_current_price, p.image_url as p_image_url,
            p_seller.user_id as p_seller_user_id, p_seller.username as p_seller_username, p_seller.avatar_url as p_seller_avatar_url,
            buyer.user_id as buyer_user_user_id, buyer.username as buyer_user_username, buyer.avatar_url as buyer_user_avatar_url,
            seller.user_id as seller_user_user_id, seller.username as seller_user_username, seller.avatar_url as seller_user_avatar_url
        FROM tongrenG.ORDERS o
        LEFT JOIN tongrenG.PRODUCTS p ON o.product_id = p.product_id
        LEFT JOIN tongrenG.USERS p_seller ON p.user_id = p_seller.user_id
        LEFT JOIN tongrenG.USERS buyer ON o.buyer_id = buyer.user_id
        LEFT JOIN tongrenG.USERS seller ON o.seller_id = seller.user_id
        WHERE o.product_id = #{productId}
        ORDER BY o.order_time DESC
    </select>
    
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM tongrenG.ORDERS WHERE order_id = #{orderId}
    </delete>

</mapper>