SET SCHEMA tongrenG; -- Moved to the top


SELECT table_name FROM all_tables WHERE owner = 'TONGRENG' AND table_name = 'USERS';
-- 删除已存在的表 (如果需要，用于重新初始化，生产环境慎用)
-- 注意：DM数据库中，如果表不存在直接删除会报错，可以考虑用匿名块或者在应用层面处理
DROP TABLE IF EXISTS FAVORITES;
DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS PRODUCTS;
DROP TABLE IF EXISTS CATEGORIES;
DROP TABLE IF EXISTS USERS;

DROP TABLE IF EXISTS COMMENTS;
DROP TABLE IF EXISTS MESSAGES;
DROP TABLE IF EXISTS CONVERSATIONS;-- 用户表 (USERS)
CREATE TABLE USERS (
    user_id BIGINT IDENTITY(1,1) PRIMARY KEY, -- DM 使用 BIGINT 和 IDENTITY 实现自增
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    registration_date TIMESTAMP DEFAULT SYSTIMESTAMP, -- DM 使用 SYSTIMESTAMP
    last_login_date TIMESTAMP,
    avatar_url VARCHAR(512) -- 新增用户头像URL字段
);

COMMENT ON TABLE USERS IS '用户信息表';
COMMENT ON COLUMN USERS.user_id IS '用户ID (主键, 自增)';
COMMENT ON COLUMN USERS.username IS '用户名 (唯一)';
COMMENT ON COLUMN USERS.password_hash IS '加密后的密码';
COMMENT ON COLUMN USERS.email IS '电子邮箱 (唯一)';
COMMENT ON COLUMN USERS.registration_date IS '注册时间';
COMMENT ON COLUMN USERS.last_login_date IS '最后登录时间';
COMMENT ON COLUMN USERS.avatar_url IS '用户头像图片URL';

-- 商品分类表 (CATEGORIES)
CREATE TABLE CATEGORIES (
    category_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL UNIQUE,
    description CLOB -- DM 使用 CLOB 对应较长文本
);

COMMENT ON TABLE CATEGORIES IS '商品分类表';
COMMENT ON COLUMN CATEGORIES.category_id IS '分类ID (主键, 自增)';
COMMENT ON COLUMN CATEGORIES.category_name IS '分类名称 (唯一)';
COMMENT ON COLUMN CATEGORIES.description IS '分类描述';

-- 商品表 (PRODUCTS)
CREATE TABLE PRODUCTS (
    product_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    user_id BIGINT NOT NULL, -- 发布者ID
    category_id BIGINT NOT NULL,
    title VARCHAR(200) NOT NULL,
    description CLOB,
    price DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'AVAILABLE' NOT NULL, -- e.g., AVAILABLE, SOLD, PENDING_PAYMENT, UNAVAILABLE
    image_url VARCHAR(512), -- 商品图片URL
    post_date TIMESTAMP DEFAULT SYSTIMESTAMP,
    views INT DEFAULT 0,
    CONSTRAINT FK_PRODUCT_USER FOREIGN KEY (user_id) REFERENCES USERS(user_id),
    CONSTRAINT FK_PRODUCT_CATEGORY FOREIGN KEY (category_id) REFERENCES CATEGORIES(category_id)
);

COMMENT ON TABLE PRODUCTS IS '商品信息表';
COMMENT ON COLUMN PRODUCTS.product_id IS '商品ID (主键, 自增)';
COMMENT ON COLUMN PRODUCTS.user_id IS '发布者用户ID (外键)';
COMMENT ON COLUMN PRODUCTS.category_id IS '商品分类ID (外键)';
COMMENT ON COLUMN PRODUCTS.title IS '商品标题';
COMMENT ON COLUMN PRODUCTS.description IS '商品描述';
COMMENT ON COLUMN PRODUCTS.price IS '商品价格';
COMMENT ON COLUMN PRODUCTS.status IS '商品状态 (AVAILABLE, SOLD等)';
COMMENT ON COLUMN PRODUCTS.image_url IS '商品主图片URL';
COMMENT ON COLUMN PRODUCTS.post_date IS '发布时间';
COMMENT ON COLUMN PRODUCTS.views IS '浏览次数';

-- 订单表 (ORDERS)
CREATE TABLE ORDERS (
    order_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    product_id BIGINT NOT NULL,
    buyer_id BIGINT NOT NULL, -- 买家ID
    seller_id BIGINT NOT NULL, -- 卖家ID (冗余, 但方便查询)
    status VARCHAR(20) NOT NULL, -- e.g., PENDING, CONFIRMED, SHIPPED, COMPLETED, CANCELLED
    price_at_purchase DECIMAL(10,2) NOT NULL, -- 下单时的价格
    order_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    last_update_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id),
    CONSTRAINT FK_ORDER_BUYER FOREIGN KEY (buyer_id) REFERENCES USERS(user_id),
    CONSTRAINT FK_ORDER_SELLER FOREIGN KEY (seller_id) REFERENCES USERS(user_id)
    -- 注意: DM 不直接支持 ON UPDATE CURRENT_TIMESTAMP, last_update_time需应用层面更新或使用触发器
);

COMMENT ON TABLE ORDERS IS '订单信息表';
COMMENT ON COLUMN ORDERS.order_id IS '订单ID (主键, 自增)';
COMMENT ON COLUMN ORDERS.product_id IS '商品ID (外键)';
COMMENT ON COLUMN ORDERS.buyer_id IS '买家用户ID (外键)';
COMMENT ON COLUMN ORDERS.seller_id IS '卖家用户ID (外键)';
COMMENT ON COLUMN ORDERS.status IS '订单状态 (PENDING, COMPLETED等)';
COMMENT ON COLUMN ORDERS.price_at_purchase IS '下单时商品价格';
COMMENT ON COLUMN ORDERS.order_time IS '订单创建时间';
COMMENT ON COLUMN ORDERS.last_update_time IS '订单最后更新时间';

-- 收藏表 (FAVORITES)
CREATE TABLE FAVORITES (
    favorite_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    user_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    favorite_time TIMESTAMP DEFAULT SYSTIMESTAMP, -- 收藏时间
    CONSTRAINT FK_FAVORITE_USER FOREIGN KEY (user_id) REFERENCES USERS(user_id),
    CONSTRAINT FK_FAVORITE_PRODUCT FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id),
    CONSTRAINT UK_USER_PRODUCT_FAVORITE UNIQUE (user_id, product_id) -- 确保用户对同一商品只能收藏一次
);

COMMENT ON TABLE FAVORITES IS '用户收藏表';
COMMENT ON COLUMN FAVORITES.favorite_id IS '收藏记录ID (主键, 自增)';
COMMENT ON COLUMN FAVORITES.user_id IS '用户ID (外键)';
COMMENT ON COLUMN FAVORITES.product_id IS '商品ID (外键)';
COMMENT ON COLUMN FAVORITES.favorite_time IS '收藏时间';


-- 评论表 (COMMENTS)
CREATE TABLE COMMENTS (
    comment_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    product_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    parent_comment_id BIGINT, -- 用于回复功能，指向父评论的comment_id
    content CLOB NOT NULL,
    comment_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_COMMENT_PRODUCT FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id) ON DELETE CASCADE,
    CONSTRAINT FK_COMMENT_USER FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE,
    CONSTRAINT FK_COMMENT_PARENT FOREIGN KEY (parent_comment_id) REFERENCES COMMENTS(comment_id) ON DELETE CASCADE
);

COMMENT ON TABLE COMMENTS IS '商品评论表';
COMMENT ON COLUMN COMMENTS.comment_id IS '评论ID (主键, 自增)';
COMMENT ON COLUMN COMMENTS.product_id IS '关联的商品ID (外键)';
COMMENT ON COLUMN COMMENTS.user_id IS '发表评论的用户ID (外键)';
COMMENT ON COLUMN COMMENTS.parent_comment_id IS '父评论ID (用于回复功能)';
COMMENT ON COLUMN COMMENTS.content IS '评论内容';
COMMENT ON COLUMN COMMENTS.comment_time IS '评论发表时间';

-- 可以考虑为常用查询字段添加索引以提高性能
CREATE INDEX IDX_PRODUCT_TITLE ON PRODUCTS(title);
CREATE INDEX IDX_PRODUCT_USER_ID ON PRODUCTS(user_id);
CREATE INDEX IDX_PRODUCT_CATEGORY_ID ON PRODUCTS(category_id);
CREATE INDEX IDX_ORDER_BUYER_ID ON ORDERS(buyer_id);
CREATE INDEX IDX_ORDER_SELLER_ID ON ORDERS(seller_id);
CREATE INDEX IDX_FAVORITE_USER_ID ON FAVORITES(user_id);

CREATE INDEX IDX_COMMENT_PRODUCT_ID ON COMMENTS(product_id);
CREATE INDEX IDX_COMMENT_USER_ID ON COMMENTS(user_id);
CREATE INDEX IDX_COMMENT_PARENT_ID ON COMMENTS(parent_comment_id);

-- 添加评论表
CREATE TABLE IF NOT EXISTS tongrenG.comments (
    id BIGINT IDENTITY(1,1) PRIMARY KEY,
    product_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    content VARCHAR(1000) NOT NULL,
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    parent_id BIGINT,
    FOREIGN KEY (product_id) REFERENCES tongrenG.products(product_id),
    FOREIGN KEY (user_id) REFERENCES tongrenG.users(user_id),
    FOREIGN KEY (parent_id) REFERENCES tongrenG.comments(id) ON DELETE CASCADE
);

-- 会话表 (CONVERSATIONS)
CREATE TABLE CONVERSATIONS (
    conversation_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    user1_id BIGINT NOT NULL,
    user2_id BIGINT NOT NULL,
    last_message_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_CONV_USER1 FOREIGN KEY (user1_id) REFERENCES USERS(user_id),
    CONSTRAINT FK_CONV_USER2 FOREIGN KEY (user2_id) REFERENCES USERS(user_id),
    CONSTRAINT UK_CONVERSATION UNIQUE (user1_id, user2_id)
);

COMMENT ON TABLE CONVERSATIONS IS '用户私信会话表';
COMMENT ON COLUMN CONVERSATIONS.conversation_id IS '会话ID (主键, 自增)';
COMMENT ON COLUMN CONVERSATIONS.user1_id IS '用户1ID';
COMMENT ON COLUMN CONVERSATIONS.user2_id IS '用户2ID';
COMMENT ON COLUMN CONVERSATIONS.last_message_time IS '最后消息时间';

-- 私信表 (MESSAGES)
CREATE TABLE MESSAGES (
    message_id BIGINT IDENTITY(1,1) PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    sender_id BIGINT NOT NULL,
    receiver_id BIGINT NOT NULL,
    content VARCHAR(1000) NOT NULL,
    send_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    is_read NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_MESSAGE_CONV FOREIGN KEY (conversation_id) REFERENCES CONVERSATIONS(conversation_id),
    CONSTRAINT FK_MESSAGE_SENDER FOREIGN KEY (sender_id) REFERENCES USERS(user_id),
    CONSTRAINT FK_MESSAGE_RECEIVER FOREIGN KEY (receiver_id) REFERENCES USERS(user_id)
);

COMMENT ON TABLE MESSAGES IS '私信消息表';
COMMENT ON COLUMN MESSAGES.message_id IS '消息ID (主键, 自增)';
COMMENT ON COLUMN MESSAGES.conversation_id IS '会话ID';
COMMENT ON COLUMN MESSAGES.sender_id IS '发送者ID';
COMMENT ON COLUMN MESSAGES.receiver_id IS '接收者ID';
COMMENT ON COLUMN MESSAGES.content IS '消息内容';
COMMENT ON COLUMN MESSAGES.send_time IS '发送时间';
COMMENT ON COLUMN MESSAGES.is_read IS '是否已读(0:未读, 1:已读)';

-- 私信相关索引
CREATE INDEX IDX_CONVERSATION_USER1 ON CONVERSATIONS(user1_id);
CREATE INDEX IDX_CONVERSATION_USER2 ON CONVERSATIONS(user2_id);
CREATE INDEX IDX_MESSAGE_CONVERSATION ON MESSAGES(conversation_id);
CREATE INDEX IDX_MESSAGE_SENDER ON MESSAGES(sender_id);
CREATE INDEX IDX_MESSAGE_RECEIVER ON MESSAGES(receiver_id);
CREATE INDEX IDX_MESSAGE_IS_READ ON MESSAGES(is_read);